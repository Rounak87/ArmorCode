import React from 'react';

const VulnerabilityList = ({ result }) => {
  if (!result) return null;

  return (
    <div className="bg-slate-800/30 rounded-2xl p-6 border border-gray-600/30">
      <h3 className="text-xl font-bold text-white mb-4 flex items-center">
        <svg className="w-6 h-6 mr-3 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 15.5c-.77.833.192 2.5 1.732 2.5z" />
        </svg>
        Vulnerability Analysis ({result.eslintIssues} found)
      </h3>
      
      {result.eslintFindings.length === 0 ? (
        <div className="text-center py-6">
          <div className="w-16 h-16 bg-green-500/20 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
          </div>
          <p className="text-green-300 text-lg font-semibold">Code appears secure!</p>
          <p className="text-gray-400 mt-2">No security vulnerabilities detected by our AI analysis.</p>
        </div>
      ) : (
        <div className="space-y-3 max-h-96 hover-scroll">
          {result.eslintFindings.map((finding, idx) => (
            <div key={idx} className="bg-gray-800/50 rounded-xl p-4 border-l-4 border-red-400 transform transition-all duration-300 hover:scale-[1.02] hover:bg-gray-800/70">
              <div className="flex items-start space-x-4">
                <div className={`p-2 rounded-lg ${
                  finding.severity === 'error' ? 'bg-red-500/20 text-red-300' : 'bg-yellow-500/20 text-yellow-300'
                }`}>
                  <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div className="flex-1">
                  <div className="flex items-center space-x-3 mb-2">
                    <span className="bg-gray-700 text-gray-300 px-3 py-1 rounded-full text-sm font-mono">
                      Line {finding.line}:{finding.column}
                    </span>
                    <span className={`px-3 py-1 rounded-full text-xs font-semibold ${
                      finding.severity === 'error' ? 'bg-red-500/30 text-red-200' : 'bg-yellow-500/30 text-yellow-200'
                    }`}>
                      {finding.severity.toUpperCase()}
                    </span>
                  </div>
                  <p className="text-white font-medium mb-1">{finding.message}</p>
                  {finding.ruleId && (
                    <p className="text-gray-400 text-sm">Rule: {finding.ruleId}</p>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default VulnerabilityList;
